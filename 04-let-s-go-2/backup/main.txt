package main

import (
	"context"
	"fmt"
	"log"
	"os"

	"github.com/tmc/langchaingo/llms"
	"github.com/tmc/langchaingo/llms/ollama"

	"github.com/tmc/langchaingo/prompts"
)

func main() {

	ctx := context.Background()

	modelName := os.Getenv("LLM")
	if modelName == "" {
		modelName = "gemma"
	}

	ollamaURL := os.Getenv("OLLAMA_BASE_URL")
	if ollamaURL == "" {
		ollamaURL = "http://host.docker.internal:11434"
	}

	llm, err := ollama.New(ollama.WithModel(modelName), ollama.WithServerURL(ollamaURL))
	if err != nil {
		log.Fatal(err)
	}

	//memory := memory.NewConversationBuffer()
	var conversation []string

	//memory := memory.NewConversationBuffer()
	// prompts.NewChatPromptTemplate(`<memory>{{.history}}</memory>`, []string{"history"}),
	prompt := prompts.NewChatPromptTemplate([]prompts.MessageFormatter{
		prompts.NewSystemMessagePromptTemplate(
			"You are a Star Trek expert.",
			nil,
		),
		prompts.NewHumanMessagePromptTemplate(
			`<context>{{.historyQuestion}}`, []string{"historyQuestion"},
		),
		prompts.NewAIMessagePromptTemplate(
			`{{.historyAnswer}}</context>`, []string{"historyAnswer"},
		),
		prompts.NewHumanMessagePromptTemplate(
			`{{.question}}`,
			[]string{"question"},
		),
	})

	question := "Who is James T Kirk?"

	promptText1, _ := prompt.Format(map[string]any{
		"question":        question,
		"historyQuestion": "",
		"historyAnswer":   "",
	})

	fmt.Println("ü§ñ prompt 1", promptText1)
	fmt.Println("üìù answer:")

	var answer string

	_, _ = llms.GenerateFromSinglePrompt(ctx, llm, promptText1,
		llms.WithStreamingFunc(func(ctx context.Context, chunk []byte) error {
			fmt.Print(string(chunk))
			answer += string(chunk)
			return nil
		}))

	//conversation = append(conversation, answer)
	conversation = append(conversation, question, answer)

	fmt.Println("")
	fmt.Println("")

	promptText2, _ := prompt.Format(map[string]any{
		"question":        "What are the name of his best friends?",
		"historyQuestion": question,
		"historyAnswer":   answer,
	})

	fmt.Println("ü§ñ prompt 2", promptText2)
	fmt.Println("üìù answer:")

	_, _ = llms.GenerateFromSinglePrompt(ctx, llm, promptText2,

		llms.WithStreamingFunc(func(ctx context.Context, chunk []byte) error {
			fmt.Print(string(chunk))

			return nil
		}))

	fmt.Println("")

}
